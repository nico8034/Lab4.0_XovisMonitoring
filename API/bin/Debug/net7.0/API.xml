<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.Controllers.CamerasController">
            <summary>
            Camera controller
            </summary>
        </member>
        <member name="M:API.Controllers.CamerasController.GetCameras(System.Threading.CancellationToken)">
            <summary>
            Get all available cameras
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:API.Controllers.CamerasController.GetSavedCameras(System.Threading.CancellationToken)">
            <summary>
            Get list of saved cameras
            </summary>
            <param name="cancellationToken"></param>
            <returns>A .txt file with all cameraIps registered in persistent storage</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:API.Controllers.CamerasController.Add(System.String,System.Threading.CancellationToken)">
            <summary>
            Add camera to list
            </summary>
            <param name="cancellationToken"></param>
            <param name="cameraIp">Example: http://10.179.0.43</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:API.Controllers.CamerasController.Reload(System.Threading.CancellationToken)">
            <summary>
            Reload available cameras from list
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:API.Controllers.CamerasController.UploadCameraList(Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Upload .txt file with list of cameraIps. Check Cameras/Saved
            </summary>
            <param name="file">A .txt file with a list of cameraIps</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.CamerasController.Remove(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove camera from list
            </summary>
            <param name="cancellationToken"></param>
            <param name="cameraIp">Example: http://10.179.0.43</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:API.Controllers.ExperimentController">
            <summary>
            Experiment controller
            </summary>
        </member>
        <member name="M:API.Controllers.ExperimentController.StartWithoutImages(System.Threading.CancellationToken)">
            <summary>
            Start an experiment that only captures logs
            </summary>
            <returns></returns>
            Without Images
        </member>
        <member name="M:API.Controllers.ExperimentController.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop an ongoing experiment
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ExperimentController.Status(System.Threading.CancellationToken)">
            <summary>
            Check if an experiment is already active
            </summary>
            <returns></returns>
        </member>
        <member name="T:API.Controllers.ExperimentDataController">
            <summary>
            Experiment Data controller
            </summary>
        </member>
        <member name="M:API.Controllers.ExperimentDataController.GetExperiments(System.Threading.CancellationToken)">
            <summary>
            Get a list of saved experiments and their name
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ExperimentDataController.DownloadExperiment(System.String,System.Threading.CancellationToken)">
            <summary>
            Download a zip folder containing data from a specific experiment
            </summary>
            <param name="experimentName">Name of experiment to download i.e: "experiment_28-07-2023T13-49-14" </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ExperimentDataController.DeleteExperiment(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific experiment
            </summary>
            <param name="experimentName">Name of experiment to delete: "experiment_28-07-2023T13-49-14" </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:API.Controllers.MonitoringController">
            <summary>
            Controller for the monitoring service
            </summary>
        </member>
        <member name="M:API.Controllers.MonitoringController.Zones(System.Threading.CancellationToken)">
            <summary>
            Get data from all zones on registered cameras
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MonitoringController.Zone(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data from specific zone by name
            </summary>
            <param name="name">The name of the specific zone, use Zones endpoint to get full list of zones</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MonitoringController.PersonCount(System.Threading.CancellationToken)">
            <summary>
            Get the total count of persons across all zones
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MonitoringController.Start(System.Threading.CancellationToken)">
            <summary>
            Start the monitoring service to detect people 
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MonitoringController.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the monitoring service, people will not be registered
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MqttController.StopPublishing(System.Threading.CancellationToken)">
            <summary>
            Stop publishing zones over MQTT
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
